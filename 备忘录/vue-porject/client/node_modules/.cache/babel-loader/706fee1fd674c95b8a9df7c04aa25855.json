{"remainingRequest":"F:\\备忘录\\vue-porject\\client\\node_modules\\babel-loader\\lib\\index.js!F:\\备忘录\\vue-porject\\client\\src\\https.js","dependencies":[{"path":"F:\\备忘录\\vue-porject\\client\\src\\https.js","mtime":1545382143516},{"path":"F:\\备忘录\\vue-porject\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\备忘录\\vue-porject\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { Message, Loading } from 'element-ui';\nimport router from './router';\nvar loading; //定义loading变量\n\nfunction startLoading() {\n  //使用Element loading-start 方法\n  loading = Loading.service({\n    lock: true,\n    text: '加载中...',\n    background: 'rgba(0, 0, 0, 0.7)'\n  });\n}\n\nfunction endLoading() {\n  //使用Element loading-close 方法\n  loading.close();\n} // 请求拦截  设置统一header\n\n\naxios.interceptors.request.use(function (config) {\n  // 加载\n  startLoading();\n\n  if (localStorage.eleToken) {\n    config.headers.Authorization = localStorage.eleToken;\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // 响应拦截  401 token过期处理\n\naxios.interceptors.response.use(function (response) {\n  endLoading();\n  return response;\n}, function (error) {\n  // 错误提醒\n  endLoading();\n  Message.error(error.response.data);\n  var status = error.response.status;\n\n  if (status == 401) {\n    Message.error('token值无效，请重新登录'); // 清除token\n\n    localStorage.removeItem('eleToken'); // 页面跳转\n\n    router.push('/auth');\n  }\n\n  return Promise.reject(error);\n});\nexport default axios;",{"version":3,"sources":["F:\\备忘录\\vue-porject\\client\\src\\https.js"],"names":["axios","Message","Loading","router","loading","startLoading","service","lock","text","background","endLoading","close","interceptors","request","use","config","localStorage","eleToken","headers","Authorization","error","Promise","reject","response","data","status","removeItem","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,YAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAIC,OAAJ,C,CAAmB;;AAEnB,SAASC,YAAT,GAAwB;AAAK;AACzBD,EAAAA,OAAO,GAAGF,OAAO,CAACI,OAAR,CAAgB;AACtBC,IAAAA,IAAI,EAAE,IADgB;AAEtBC,IAAAA,IAAI,EAAE,QAFgB;AAGtBC,IAAAA,UAAU,EAAE;AAHU,GAAhB,CAAV;AAKH;;AACD,SAASC,UAAT,GAAsB;AAAK;AACvBN,EAAAA,OAAO,CAACO,KAAR;AACH,C,CAED;;;AACAX,KAAK,CAACY,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAAC,MAAM,EAAI;AACrC;AACAV,EAAAA,YAAY;;AACZ,MAAIW,YAAY,CAACC,QAAjB,EAA0B;AACtBF,IAAAA,MAAM,CAACG,OAAP,CAAeC,aAAf,GAA8BH,YAAY,CAACC,QAA3C;AACH;;AACD,SAAOF,MAAP;AACH,CAPD,EAOG,UAAAK,KAAK,EAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CATD,E,CAWA;;AACApB,KAAK,CAACY,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CAAgC,UAAAS,QAAQ,EAAI;AACxCb,EAAAA,UAAU;AACV,SAAOa,QAAP;AACH,CAHD,EAGG,UAAAH,KAAK,EAAI;AACR;AACAV,EAAAA,UAAU;AACVT,EAAAA,OAAO,CAACmB,KAAR,CAAcA,KAAK,CAACG,QAAN,CAAeC,IAA7B;AAHQ,MAKAC,MALA,GAKWL,KAAK,CAACG,QALjB,CAKAE,MALA;;AAMR,MAAIA,MAAM,IAAI,GAAd,EAAmB;AACfxB,IAAAA,OAAO,CAACmB,KAAR,CAAc,gBAAd,EADe,CAEf;;AACAJ,IAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB,EAHe,CAKf;;AACAvB,IAAAA,MAAM,CAACwB,IAAP,CAAY,OAAZ;AACH;;AAED,SAAON,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAnBD;AAqBA,eAAepB,KAAf","sourcesContent":["import axios from 'axios'\r\nimport { Message, Loading } from 'element-ui';\r\nimport router from './router'\r\n\r\nlet loading        //定义loading变量\r\n\r\nfunction startLoading() {    //使用Element loading-start 方法\r\n    loading = Loading.service({\r\n        lock: true,\r\n        text: '加载中...',\r\n        background: 'rgba(0, 0, 0, 0.7)'\r\n    })\r\n}\r\nfunction endLoading() {    //使用Element loading-close 方法\r\n    loading.close()\r\n}\r\n\r\n// 请求拦截  设置统一header\r\naxios.interceptors.request.use(config => {\r\n    // 加载\r\n    startLoading()\r\n    if (localStorage.eleToken){\r\n        config.headers.Authorization =localStorage.eleToken \r\n    }\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n})\r\n\r\n// 响应拦截  401 token过期处理\r\naxios.interceptors.response.use(response => {\r\n    endLoading()\r\n    return response\r\n}, error => {\r\n    // 错误提醒\r\n    endLoading()\r\n    Message.error(error.response.data)\r\n\r\n    const { status } = error.response\r\n    if (status == 401) {\r\n        Message.error('token值无效，请重新登录')\r\n        // 清除token\r\n        localStorage.removeItem('eleToken')\r\n\r\n        // 页面跳转\r\n        router.push('/auth')\r\n    }\r\n\r\n    return Promise.reject(error)\r\n})\r\n\r\nexport default axios"]}]}